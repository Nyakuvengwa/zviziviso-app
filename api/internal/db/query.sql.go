// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package zvizivisodb

import (
	"context"
)

const getCountry = `-- name: GetCountry :one
SELECT id, iso_code3, name, dialing_code
FROM countries
WHERE id = $1
`

func (q *Queries) GetCountry(ctx context.Context, id int32) (Country, error) {
	row := q.db.QueryRow(ctx, getCountry, id)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.IsoCode3,
		&i.Name,
		&i.DialingCode,
	)
	return i, err
}

const listCountries = `-- name: ListCountries :many
SELECT id, iso_code3, name, dialing_code
FROM countries
ORDER BY name  
LIMIT $1 OFFSET $2
`

type ListCountriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCountries(ctx context.Context, arg ListCountriesParams) ([]Country, error) {
	rows, err := q.db.Query(ctx, listCountries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Country{}
	for rows.Next() {
		var i Country
		if err := rows.Scan(
			&i.ID,
			&i.IsoCode3,
			&i.Name,
			&i.DialingCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
