// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createNewDeathNotice = `-- name: CreateNewDeathNotice :one
INSERT INTO death_notices (first_name, last_name, title, date_of_death, date_of_birth, cause_of_death, obituary, image_url, user_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING death_notice_id
`

type CreateNewDeathNoticeParams struct {
	FirstName    string      `json:"first_name"`
	LastName     string      `json:"last_name"`
	Title        pgtype.Text `json:"title"`
	DateOfDeath  pgtype.Date `json:"date_of_death"`
	DateOfBirth  pgtype.Date `json:"date_of_birth"`
	CauseOfDeath pgtype.Text `json:"cause_of_death"`
	Obituary     pgtype.Text `json:"obituary"`
	ImageUrl     pgtype.Text `json:"image_url"`
	UserID       pgtype.UUID `json:"user_id"`
}

func (q *Queries) CreateNewDeathNotice(ctx context.Context, arg CreateNewDeathNoticeParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createNewDeathNotice,
		arg.FirstName,
		arg.LastName,
		arg.Title,
		arg.DateOfDeath,
		arg.DateOfBirth,
		arg.CauseOfDeath,
		arg.Obituary,
		arg.ImageUrl,
		arg.UserID,
	)
	var death_notice_id uuid.UUID
	err := row.Scan(&death_notice_id)
	return death_notice_id, err
}

const createUserDetails = `-- name: CreateUserDetails :one
INSERT INTO users (username, email, password_hash, first_name, last_name, role)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING user_id
`

type CreateUserDetailsParams struct {
	Username     string      `json:"username"`
	Email        string      `json:"email"`
	PasswordHash string      `json:"password_hash"`
	FirstName    pgtype.Text `json:"first_name"`
	LastName     pgtype.Text `json:"last_name"`
	Role         pgtype.Text `json:"role"`
}

func (q *Queries) CreateUserDetails(ctx context.Context, arg CreateUserDetailsParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUserDetails,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.FirstName,
		arg.LastName,
		arg.Role,
	)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const getCountry = `-- name: GetCountry :one
SELECT id, iso_code3, country_name, dialing_code
FROM countries
WHERE id = $1
`

func (q *Queries) GetCountry(ctx context.Context, id int32) (Country, error) {
	row := q.db.QueryRow(ctx, getCountry, id)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.IsoCode3,
		&i.CountryName,
		&i.DialingCode,
	)
	return i, err
}

const getDeathNoticeById = `-- name: GetDeathNoticeById :one
SELECT death_notice_id, first_name, last_name, title, date_of_death, date_of_birth, cause_of_death, obituary, image_url, user_id, created_at, updated_at
FROM death_notices
WHERE death_notice_id = $1
`

func (q *Queries) GetDeathNoticeById(ctx context.Context, deathNoticeID uuid.UUID) (DeathNotice, error) {
	row := q.db.QueryRow(ctx, getDeathNoticeById, deathNoticeID)
	var i DeathNotice
	err := row.Scan(
		&i.DeathNoticeID,
		&i.FirstName,
		&i.LastName,
		&i.Title,
		&i.DateOfDeath,
		&i.DateOfBirth,
		&i.CauseOfDeath,
		&i.Obituary,
		&i.ImageUrl,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDeathNotices = `-- name: GetDeathNotices :many
SELECT death_notice_id, first_name, last_name, title, date_of_death, date_of_birth, cause_of_death, obituary, image_url, user_id, created_at, updated_at
FROM death_notices
ORDER BY created_at DESC
Limit $1
Offset $2
`

type GetDeathNoticesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetDeathNotices(ctx context.Context, arg GetDeathNoticesParams) ([]DeathNotice, error) {
	rows, err := q.db.Query(ctx, getDeathNotices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DeathNotice{}
	for rows.Next() {
		var i DeathNotice
		if err := rows.Scan(
			&i.DeathNoticeID,
			&i.FirstName,
			&i.LastName,
			&i.Title,
			&i.DateOfDeath,
			&i.DateOfBirth,
			&i.CauseOfDeath,
			&i.Obituary,
			&i.ImageUrl,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProvincesByCountryId = `-- name: GetProvincesByCountryId :many
SELECT id, country_id, province_name, code 
FROM provinces
WHERE country_id = $1
ORDER BY province_name
`

func (q *Queries) GetProvincesByCountryId(ctx context.Context, countryID int32) ([]Province, error) {
	rows, err := q.db.Query(ctx, getProvincesByCountryId, countryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Province{}
	for rows.Next() {
		var i Province
		if err := rows.Scan(
			&i.ID,
			&i.CountryID,
			&i.ProvinceName,
			&i.Code,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProvincesById = `-- name: GetProvincesById :one
SELECT id, country_id, province_name, code 
FROM provinces
WHERE id = $1
`

func (q *Queries) GetProvincesById(ctx context.Context, id int32) (Province, error) {
	row := q.db.QueryRow(ctx, getProvincesById, id)
	var i Province
	err := row.Scan(
		&i.ID,
		&i.CountryID,
		&i.ProvinceName,
		&i.Code,
	)
	return i, err
}

const getUserByEmailOrUsername = `-- name: GetUserByEmailOrUsername :many
SELECT user_id, username, email, password_hash, first_name, last_name, role, created_at, updated_at
FROM users
WHERE email = $1 OR username = $2
`

type GetUserByEmailOrUsernameParams struct {
	Email    string `json:"email"`
	Username string `json:"username"`
}

func (q *Queries) GetUserByEmailOrUsername(ctx context.Context, arg GetUserByEmailOrUsernameParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUserByEmailOrUsername, arg.Email, arg.Username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.PasswordHash,
			&i.FirstName,
			&i.LastName,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserSummaryDetails = `-- name: GetUserSummaryDetails :one
SELECT user_id, username, first_name, last_name, role
FROM users
WHERE user_id = $1
`

type GetUserSummaryDetailsRow struct {
	UserID    uuid.UUID   `json:"user_id"`
	Username  string      `json:"username"`
	FirstName pgtype.Text `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
	Role      pgtype.Text `json:"role"`
}

func (q *Queries) GetUserSummaryDetails(ctx context.Context, userID uuid.UUID) (GetUserSummaryDetailsRow, error) {
	row := q.db.QueryRow(ctx, getUserSummaryDetails, userID)
	var i GetUserSummaryDetailsRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Role,
	)
	return i, err
}

const listCountries = `-- name: ListCountries :many
SELECT id, iso_code3, country_name, dialing_code
FROM countries
ORDER BY country_name
`

func (q *Queries) ListCountries(ctx context.Context) ([]Country, error) {
	rows, err := q.db.Query(ctx, listCountries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Country{}
	for rows.Next() {
		var i Country
		if err := rows.Scan(
			&i.ID,
			&i.IsoCode3,
			&i.CountryName,
			&i.DialingCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserDetails = `-- name: UpdateUserDetails :exec
UPDATE users
SET username = $2, first_name = $3, last_name = $4, role = $5
WHERE user_id = $1
`

type UpdateUserDetailsParams struct {
	UserID    uuid.UUID   `json:"user_id"`
	Username  string      `json:"username"`
	FirstName pgtype.Text `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
	Role      pgtype.Text `json:"role"`
}

func (q *Queries) UpdateUserDetails(ctx context.Context, arg UpdateUserDetailsParams) error {
	_, err := q.db.Exec(ctx, updateUserDetails,
		arg.UserID,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.Role,
	)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password_hash = $2
WHERE user_id = $1
`

type UpdateUserPasswordParams struct {
	UserID       uuid.UUID `json:"user_id"`
	PasswordHash string    `json:"password_hash"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.UserID, arg.PasswordHash)
	return err
}
